package main

import (
	"bytes"
	"google.golang.org/protobuf/compiler/protogen"
	"html/template"
	"log"
)

// 定义模块
const tmplService = `
{{$root := .}}

var AlphaAdapter *{{.ServiceName}}Service
func init() {
	consul.RegisterResolver("consul", &consulapi.Config{Address: "http://59.110.162.134:8500"}, "alpha:1.0")
	conn, err := grpc.Dial("consul:///", grpc.WithInsecure(), grpc.WithBalancerName(balancer.RoundRobin))
	if err != nil {
		grpclog.Error("init adapter file error,err is ",err)
		return 
	}
	client := NewAlphaClient(conn)
	AlphaAdapter = &{{.ServiceName}}Service{
		c: client,
	}
}

type {{.ServiceName}}Service struct {
	c AlphaClient
}


{{range $_, $m := .MethodList}}
func (p *{{$root.ServiceName}}Service) {{$m.MethodName}}(ctx context.Context, in *{{$m.InputTypeName}}) (out *{{$m.OutputTypeName}},err error) {
	return p.c.{{$m.MethodName}}(ctx,in)
}
{{end}}
`

// 定义服务和接口描述结构
type ServiceSpec struct {
	ServiceName string
	MethodList  []ServiceMethodSpec
}

type ServiceMethodSpec struct {
	MethodName     string
	InputTypeName  string
	OutputTypeName string
}

// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_adapter.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-adapter. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(file, g)
	return g
}

// generateFileContent generates the gRPC service definitions, excluding the package statement.
func generateFileContent(file *protogen.File, g *protogen.GeneratedFile) {
	genImportant(file, g)
	if len(file.Services) == 0 {
		return
	}
	genService(file, g)
}

func genImportant(file *protogen.File, g *protogen.GeneratedFile) {
	g.P("import (")
	g.P("consulapi", " \"github.com/hashicorp/consul/api\"")
	g.P("\"github.com/mirrorsge/grpc-lb/registry/consul\"")
	g.P("\"github.com/mirrorsge/grpc-lb/balancer\"")
	g.P("\"google.golang.org/grpc\"")
	g.P("\"context\"")
	g.P("\"google.golang.org/grpc/grpclog\"")
	g.P(")")
}
func genService(file *protogen.File, g *protogen.GeneratedFile) {
	for _, svc := range file.Services {
		spec := buildServiceSpec(svc, g)
		var buf bytes.Buffer
		t := template.Must(template.New("").Parse(tmplService))
		err := t.Execute(&buf, spec)
		if err != nil {
			log.Fatal(err)
		}
		g.P(buf.String())
	}
}

// 解析每个服务的ServiceSpec元信息
func buildServiceSpec(svc *protogen.Service, g *protogen.GeneratedFile) *ServiceSpec {
	spec := &ServiceSpec{ServiceName: svc.GoName}
	for _, m := range svc.Methods {
		spec.MethodList = append(spec.MethodList, ServiceMethodSpec{
			MethodName:     m.GoName,
			InputTypeName:  g.QualifiedGoIdent(m.Input.GoIdent),
			OutputTypeName: g.QualifiedGoIdent(m.Output.GoIdent),
		})
	}

	return spec
}
